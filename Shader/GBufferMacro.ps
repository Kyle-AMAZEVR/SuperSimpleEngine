
struct PixelInputType
{
    float4 InPosition : SV_POSITION;
    float4 InViewPosition : COLOR0;
    float2 InTexCoord : TEXCOORD0;
    float3 InNormal : NORMALWS;
    float3 InTangent : TANGENTWS;
    float3 InBitangent : BITANGENTWS;
};

Texture2D DiffuseTex;
Texture2D NormalTex;
Texture2D MaskTex;
Texture2D MetalicTex;
Texture2D RoughnessTex;

SamplerState DefaultTexSampler : register(s0);


struct PixelOutputType
{
    float4 DiffuseColor : SV_Target0;
    float4 PositionColor: SV_Target1;
    float4 NormalColor : SV_Target2;
};

cbuffer MetalicRoughness
{
    float Metalic = 0.9;
    float Roughness = 0.9;
};

cbuffer CBDiffuseColor
{
    float3 DiffuseOverride;
};


PixelOutputType PSMain(PixelInputType pin)
{
    PixelOutputType output = (PixelOutputType)0;;

#if MASK_EXIST
    float4 MaskValue= MaskTex.Sample(DefaultTexSampler, pin.InTexCoord);
    if(MaskValue.x > 0)
    {
        output.DiffuseColor = DiffuseTex.Sample(DefaultTexSampler, pin.InTexCoord);
    }
    else
    {
        discard;
    }
#else
    #if DIFFUSE_EXIST
        output.DiffuseColor = DiffuseTex.Sample(DefaultTexSampler, pin.InTexCoord);
    #else
        output.DiffuseColor = float4(DiffuseOverride,0);
    #endif
#endif

#if ROUGH_EXIST
    output.DiffuseColor.a = RoughnessTex.Sample(DefaultTexSampler, pin.InTexCoord).x;
#else
    output.DiffuseColor.a = Roughness;
#endif

    if(pin.InPosition.w == 0)
    {
        output.DiffuseColor = float4(1,0,0,0);
    }

#if NORMAL_EXIST
    float3x3 TangentToModelViewSpaceMatrix = float3x3( normalize(pin.InTangent),
                                                       normalize(pin.InBitangent),
                                                       normalize(pin.InNormal));

    float3 NormalMapNormal = normalize( 2.0f * (NormalTex.Sample(DefaultTexSampler, pin.InTexCoord ).xyz ) - float3(1.0f,1.0f,1.0f) );
    float3 BumpNormal = normalize(mul(NormalMapNormal.xyz , TangentToModelViewSpaceMatrix));
    output.NormalColor.xyz = BumpNormal;
#else
    output.NormalColor.xyz = pin.InNormal.xyz;
#endif

#if METALLIC_EXIST
    output.NormalColor.a = MetalicTex.Sample(DefaultTexSampler, pin.InTexCoord).x;
#else
    output.NormalColor.a = Metalic;
#endif
    //

    output.PositionColor = pin.InViewPosition;

    return output;

}
